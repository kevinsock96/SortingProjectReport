#include <iostream>
#include <chrono>
#include <random>
class mergeSortClass
{
private:
    
public:
    //This is going to take our array. int low is going to be used to keep track of the left most index of the array of the mergeSort. high is to keep track of the right most index of the mergeSort
    double ourRandomDoubleArray[10]; //
    double ourSortedDoubleArray[20] = {1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0}; //
    int ourRandomintArray[10]; //
    int ourHalfSortedArray[20] = {5,6,7,8,9,10,11,12,13,14,15,3,15,4,2,1,22,48,24,32}; //
    int ourReverseSortedArray[10] = {10,9,8,7,6,5,4,3,2,1};
    void mergeSort(int *array, int low, int high)
        {
            int midPoint;
            if (low < high)
                {
                    midPoint = (low + high)/2;
                    //Recursively calls the merge.
                    mergeSort(array, low, midPoint);
                    mergeSort(array, midPoint + 1, high);
                    merge(array, low, high, midPoint);
                }
        }
    // this is going to be the function actually doing the sorting. 
    void merge(int *array, int low, int high, int midPoint)
        {
            //we create lowTwo to create the size of the left array, and highTwo to create the size of the right array.
            int a, b, c, lowTwo, highTwo;
            lowTwo = midPoint - low + 1;
            highTwo = high - midPoint;
            int leftArray[lowTwo], rightArray[highTwo];
            //puts the left side into left side array, right side into right side array. fillr up 
            for (int i = 0; i < lowTwo; i++)
                {
                    leftArray[i] = array[low + i];
                }
            for (int j = 0; j < highTwo; j++)
                {
                    rightArray[j] = array[j + midPoint + 1];
                }
            a = 0, b = 0, c = low;
            //comparison function. will compare the values in the left array to the right array. Does the checks, adds it to our array.
            while (a < lowTwo && b < highTwo)
                {
                    if (leftArray[a] <= rightArray[b])
                        {
                            array[c] = leftArray[a];
                            a++;
                        }
                    else
                        {
                            array[c] = rightArray[b];
                            b++;
                        }
                    c++;
                }
            //Makes sure there is nothing leftover after the merge. If there is, we put it back into our array at the current end position.
            while (a < lowTwo)
            {
                array[c] = leftArray[a];
                a++,c++;
            }
            
            while (b < highTwo)
            {
                array[c] = rightArray[b];
                b++,c++;
            }
        }
        //overloading our function to take different data types.
    void mergeSort(double *array, int low, int high)
        {
            int midPoint;
            
            if (low < high)
                {
                    midPoint = (low + high)/2;
                    //Recursively calls the merge.
                    mergeSort(array, low, midPoint);
                    mergeSort(array, midPoint + 1, high);
                    merge(array, low, high, midPoint);
                }
        }
    void merge(double *array, int low, int high, int midPoint)
        {
            //we create lowTwo to create the size of the left array, and highTwo to create the size of the right array.
            int a, b, c, lowTwo, highTwo;
            lowTwo = midPoint - low + 1;
            highTwo = high - midPoint;
            double leftArray[lowTwo], rightArray[highTwo];
            //puts the left side into left side array, right side into right side array. fillr up 
            for (int i = 0; i < lowTwo; i++)
                {
                    leftArray[i] = array[low + i];
                }
            for (int j = 0; j < highTwo; j++)
                {
                    rightArray[j] = array[j + midPoint + 1];
                }
            a = 0, b = 0, c = low;
            //comparison function. will compare the values in the left array to the right array. Does the checks, adds it to our array.
            while (a < lowTwo && b < highTwo)
                {
                    if (leftArray[a] <= rightArray[b])
                        {
                            array[c] = leftArray[a];
                            a++;
                        }
                    else
                        {
                            array[c] = rightArray[b];
                            b++;
                        }
                    c++;
                }
            //Makes sure there is nothing leftover after the merge. If there is, we put it back into our array at the current end position.
            while (a < lowTwo)
            {
                array[c] = leftArray[a];
                a++,c++;
            }
            
            while (b < highTwo)
            {
                array[c] = rightArray[b];
                b++,c++;
            }
        }
    void fillRandomDoubleArray()
        {
            for (int i = 0; i < 10; i++)
                {
                    ourRandomDoubleArray[i] = (double)(rand()) / ((double)(RAND_MAX));
                }
            
        }
    void fillRandomintArray()
        {
            for (int i = 0; i < 10; i++)
                {
                    ourRandomintArray[i] = int((rand() % 11));
                }
            
        }
    void printArray();
};
    void mergeSortClass::printArray()
        {
            for (int i = 0; i < (sizeof(ourRandomDoubleArray)/sizeof(ourRandomDoubleArray[0])); i++)
                {
                    std::cout << ourRandomDoubleArray[i] << "\n";
                }
            
        }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MAIN FUNCTION




#include <iostream>
#include "mergeSort.hpp"
#include <random>
#include <chrono>

int main()

{
    mergeSortClass ourMerge;
    ourMerge.fillRandomDoubleArray();
    auto start = std::chrono::steady_clock::now();
    ourMerge.mergeSort(ourMerge.ourRandomDoubleArray, 0, (sizeof(ourMerge.ourRandomDoubleArray)/sizeof(ourMerge.ourRandomDoubleArray[0])));
    auto stop = std::chrono::steady_clock::now();
    std::cout << "The time it takes to run merge sort on a fully randomized double array is ";
    std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop - start).count() << " nanoseconds " << "\n";
    
    auto start1 = std::chrono::steady_clock::now();
    ourMerge.mergeSort(ourMerge.ourSortedDoubleArray, 0, (sizeof(ourMerge.ourSortedDoubleArray)/sizeof(ourMerge.ourSortedDoubleArray[0])));
    auto stop1 = std::chrono::steady_clock::now();
    std::cout << "The time it takes to run merge sort on a sorted double array is ";
    std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop1 - start1).count() << " nanoseconds " << "\n";
    
    ourMerge.fillRandomintArray();
    auto start2 = std::chrono::steady_clock::now();
    ourMerge.mergeSort(ourMerge.ourRandomintArray, 0, (sizeof(ourMerge.ourRandomintArray)/sizeof(ourMerge.ourRandomintArray[0])));
    auto stop2 = std::chrono::steady_clock::now();
    std::cout << "The time it takes to run merge sort on a fully randomized integer array is ";
    std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop2 - start2).count() << " nanoseconds " << "\n";
    
    auto start3 = std::chrono::steady_clock::now();
    ourMerge.mergeSort(ourMerge.ourHalfSortedArray, 0, (sizeof(ourMerge.ourHalfSortedArray)/sizeof(ourMerge.ourHalfSortedArray[0])));
    auto stop3 = std::chrono::steady_clock::now();
    std::cout << "The time it takes to run merge sort on a half sorted integer array is ";
    std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop3 - start3).count() << " nanoseconds " << "\n";

    auto start4 = std::chrono::steady_clock::now();
    ourMerge.mergeSort(ourMerge.ourReverseSortedArray, 0, (sizeof(ourMerge.ourReverseSortedArray)/sizeof(ourMerge.ourReverseSortedArray[0])));
    auto stop4 = std::chrono::steady_clock::now();
    std::cout << "The time it takes to run merge sort on a reverse sorted integer array is ";
    std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop4 - start4).count() << " nanoseconds " << "\n";
}

