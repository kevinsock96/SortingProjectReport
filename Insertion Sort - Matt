#include <iostream>
#include <bits/stdc++.h>
#include <chrono>


//Sorting function using the insertion sort algorithm
void insertionSort(int arr[], int n) {
	int i, k, j;
	for (i = 1; i < n; i++) {
		k = arr[i];
		j = i - 1;

		//Moves elements greater than k to a position ahead of the current
		while (j >= 0 && arr[j] > k) {
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		arr[j + 1] = k;
	}
}

//Function created to print out and test the array
void printArray(int arr[], int n) {
	for (int i = 0; i < n; i++) {
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl << std::endl;
}

//Main function to test all other functions 
int main() {
	int arr1[] = { 12, 11, 2, 9, 6 };
	int n1 = sizeof(arr1) / sizeof(arr1[0]);
	
	int arr2[] = { 2, 18, 1, 8, 6 };
	int n2 = sizeof(arr2) / sizeof(arr2[0]);

	int arr3[] = { 12, 9, 15, 3, 6 };
	int n3 = sizeof(arr3) / sizeof(arr3[0]);
	
	int arr4[] = { 10, 11, 3, 4, 6 };
	int n4 = sizeof(arr4) / sizeof(arr4[0]);


	auto start1 = std::chrono::high_resolution_clock::now();
	insertionSort(arr1, n1);
	auto stop1 = std::chrono::high_resolution_clock::now();
	std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop1 - start1).count() << " ns" << std::endl;
	printArray(arr1, n1);
	
	auto start2 = std::chrono::high_resolution_clock::now();
	insertionSort(arr2, n2);
	auto stop2 = std::chrono::high_resolution_clock::now();
	std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop2 - start2).count() << " ns" << std::endl;
	printArray(arr2, n2);
	
	auto start3 = std::chrono::high_resolution_clock::now();
	insertionSort(arr3, n3);
	auto stop3 = std::chrono::high_resolution_clock::now();
	std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop3 - start3).count() << " ns" << std::endl;
	printArray(arr3, n3);
	
	
	auto start4 = std::chrono::high_resolution_clock::now();
	insertionSort(arr4, n4);
	auto stop4 = std::chrono::high_resolution_clock::now();
	std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(stop4 - start4).count() << " ns" << std::endl;
	printArray(arr4, n4);

	return 0;
}
